Short guide to the UPMurphi extended syntax
-------------------------------------------------------

UPMurphi extends the CMurphi description language syntax (see
http://www.cs.utah.edu/formal_verification/Murphi and read the
original Murphi_User_Manual included in this release for a complete
reference to the CMurphi description language) with the following
constructs.



1) Global (state) variables and PDDL domain variables

It is possible (although not required) to associate to some of the
state variables (declared in the var section of the model) their
"PDDL name". This marks such variables as "domain variables",
whereas the other state variables will be "internal" (i.e., used for
modelling purposes only) and will not appear in the PDDL output when
state dump is requested (pddlvv format, see below). To this aim, add
the "pddlname" attribute to the variable declaration as in the
following example:

daytime [pddlname: "daytime";] : real_type;



2) Rule classes

Rules must be marked with their "class", to allow correct handling
of some PDDL+ features such as durative actions, as well as to
measure the process and plan durations. Rule classes are identified
by the keywords "clock", "action", "event", "durative_start",
"durative_end" placed before the "rule" keyword. Moreover, it is
possible (and sometimes required) to associate further attributes to
each rule: pddlname, duration and weight. These attributes are
placed immediately before the rule "begin".

Classes "durative_start" and "durative_end" mark the rules that
start and conclude, respectively, a durative action. The pddlname
attribute is used to match each start with the corresponding end,
thus it must have the same value on the "durative_start" and
"durative_end" rules of the same durative action.

Example:

durative_end rule "observe2_end"
(...) ==>
pddlname: "observe2";
begin
		...
end;

durative_start rule "observe2_start"
(...)  ==>
pddlname: "observe2";
begin
		...
end;

The "clock" class makes the planner know what rule represents the
time flow. In such a rule, the model must perform all the updates
related to the time flow, such as executing active processes.

Example:

clock rule "time_passing"
(...) ==>
begin
		...
end;

The "duration" attribute can be set to override the planner
defaults. In particular, UPMurphi assumes that the clock rule has a
duration of 1, whereas all the other rules are instantaneous
(duration zero). Note: if a clock rule is not declared or a duration
grater than zero is set on some rules, plan optimisation will give
unexpected results.

The "action" class corresponds to PDDL actions, and is the default
class.

Example:

action rule "example_rule"
(...)  ==>
pddlname: "action1";
duration: 3;
weight: 10;
begin
		...
end;

The rule "weight" is used to optimize the plan. If not specified, it
is set to the duration of the rule (i.e., optimization is performed
on the plan length). Both duration and weight can be expressions, and
such expressions can optionally make reference to the current state
variables, to create state-and-rule-dependant weights and durations.
However, in this case you MUST specify the --varweight and/or --varduration
switches when compiling the planner.



3) Invariants (errors)

Invariants, if defined, tell the planner which states should be
considered "erroneous" and thus must not be further explored. In
other words, if a state violates an invariants, its next states will
not be expanded.

Example:

invariant "everything going right"
	(all_event_true);



4) Metrics

At the end of the model, you must specify the metrics to be used for
optimization (if the planner is executed with the optimisation
option). This can be done with one of the following expressions:

metric: minimize;

or

metric: maximize;



5) Goal

The goal declaration, usually placed at the end of the model and
immediately before the metric, is a boolean condition that is true
on the states that meet the problem goal.

Example:

goal  " enjoy "
	((observe_complete() & all_event_true));

Note that it is possible to use function calls in the goal condition
(as well as the invariant conditions described in the previous
section).



UPMurphi 2.0 compiler (upmc) options
------------------------------------------------

UPMurphi 2.0 command line is very similar to the one of CMurphi.
Remember to apply *always* options -b and -c to save memory.

Note that upmc will not recompile the model (.m file) in the source
(.cpp file) if the former has not been updated since the last
compilation. To force a recompilation, manually delete the source
file or use the --force command line switch.

Finally, if your model has rule durations and/or rule weights that
are calculated by expressions which use the current state variables
(i.e., the duration and/or weight of a rule depends also from the state
the rule is applied on), then you MUST specify the command line switches
--varduration and/or --varweight to notify the planner of this. Otherwise,
the planning results will be incorrect. Note that each of these switches
increase the planner memory and disk requirements, so use them only if
you need them!



UPMurphi 2.0 planner options
-------------------------------------

Here we list only the planning-related options.
Other options are the same as in CMurphi.

General:
   -noclear      do not delete working disk files (useful with -phase).
   -phase<1..5>  start with phase n (default: 0) - experimental.
   -search:o     create an optimal plan for each startstate (default).
   -search:u     create an universal plan.
   -search:uo    create an universal optimal plan.
   -search:f     create a feasible plan for each startstate.
Exploration Strategy: (default: -v)
   -cdl          check for deadlock.
   -l<n>         maximum bfs level (default: unlimited).
Output:
   -output file     write output in file (default: stdout).
   -format:pddl     output plans in pddl format (default).
   -format:pddlv    output plans in pddl format with verbose comments.
   -format:pddlvv   output plans in pddl format with very verbose comments.
   -format:text     output plans/actions in text format.
   -format:verbose  output plans/actions in verbose text format.
   -format:raw      output actions in binary format.
   -format:csv      output actions in csv format.


If  -noclear is NOT specified, the planner will remove all its
temporary files from disk after its execution. These files can be
used with the -phase option to restart the planning process from a
specific checkpoint (exploration, dynamics generation, optimal paths
calculation, plan generation, output). However, this feature is
*experimental* and it is not safe to use them now. Anyway you can
use -noclear to save the planner files for further processing: these
include a full (binary) dump of the plant states, the complete set
of transitions, the inverted plant graph, the optimal actions chosen
in each state, etc.

The -search:* options set the planning algorithm to use.

Deadlock detection is DISABLED by default. You can activate it with
-cdl.

The number of BFS levels to explore can be specified through the -l
option. If this option is set, the planner will work only on the
states found on these levels, otherwise it will try to explore the
entire domain before starting the optimisation and planning phases.

By default, final output is written to the console. If you want to
redirect it to a file, use the -output option to specify its name.

Output formats, specified through the -format:* options, are:

pddl: standard PDDL plan format.

pddlv: PDDL plan format with comments that show the execution of
"invisible actions" such as events, durative action terminations,
clock ticks, etc.

pddlvv: as pddlv but, after each step, prints also a comment with
the current domain variables value.

text: textual format useful for diagnostic purposes.

verbose: as text, but prints the system state after each step.

raw: prints the control actions in binary format. Useful to generate
controllers instead of universal plans.

csv: prints the control actions in csv format. Each row contains the
description of a state (i.e., the list of its variables) and the
name of the rule to apply in such state. Values are separated by a
colon. Warning: only variables marked with a pddlname are included
is the state output!

obdd: this option is visible only if the planner is compiled with
the CUDD library, and generates an obdd-compressed binary
controller. Currently linking the CUDD generates some errors on
Linux system, thus has been disabled.
